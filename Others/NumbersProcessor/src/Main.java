
import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author PC
 */
public class Main {

    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    // H√†m t√≠nh BSCNN (LCM) c·ªßa hai s·ªë a v√† b
    public static int lcm(int a, int b) {
        return (a * b) / gcd(a, b);
    }

    public static int sumOfDigits(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;  // L·∫•y ch·ªØ s·ªë cu·ªëi c√πng c·ªßa n
            n /= 10;        // Lo·∫°i b·ªè ch·ªØ s·ªë cu·ªëi c√πng c·ªßa n
        }
        return sum;
    }
    // H√†m ki·ªÉm tra s·ªë nguy√™n t·ªë

    public static boolean isPrime(int number) {
        if (number <= 1) {
            return false; // C√°c s·ªë <= 1 kh√¥ng ph·∫£i l√† s·ªë nguy√™n t·ªë
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false; // N·∫øu chia h·∫øt cho s·ªë n√†o ƒë√≥, kh√¥ng ph·∫£i s·ªë nguy√™n t·ªë
            }
        }
        return true;
    }

    // H√†m li·ªát k√™ n s·ªë nguy√™n t·ªë ƒë·∫ßu ti√™n
    public static void printNPrimes(int n) {
        int count = 0; // ƒê·∫øm s·ªë l∆∞·ª£ng s·ªë nguy√™n t·ªë ƒë√£ t√¨m th·∫•y
        int number = 2; // B·∫Øt ƒë·∫ßu ki·ªÉm tra t·ª´ s·ªë 2

        // L·∫∑p ƒë·∫øn khi t√¨m ƒë·ªß n s·ªë nguy√™n t·ªë
        while (count < n) {
            if (isPrime(number)) {
                System.out.print(number + " "); // In ra s·ªë nguy√™n t·ªë
                count++; // TƒÉng s·ªë l∆∞·ª£ng s·ªë nguy√™n t·ªë ƒë√£ t√¨m th·∫•y
            }
            number++; // Ki·ªÉm tra s·ªë ti·∫øp theo
        }
        System.out.println(); // Xu·ªëng d√≤ng sau khi in ƒë·ªß s·ªë nguy√™n t·ªë
    }

    public static boolean isPerfectNumber(int number) {
        int sum = 0;
        for (int i = 1; i < number; i++) {
            if (number % i == 0) {
                sum += i;
            }
        }
        return sum == number;/*S·ªë ho√†n h·∫£o l√† s·ªë c√≥ t·ªïng c√°c ∆∞·ªõc c·ªßa n√≥ (tr·ª´ ch√≠nh n√≥) b·∫±ng ch√≠nh s·ªë ƒë√≥. V√≠ d·ª•: 6=1+2+3

         */
    }

    public static boolean isPalindrome(int number) {
        int originalNumber = number;
        int reversedNumber = 0;

        while (number > 0) {
            int digit = number % 10;
            reversedNumber = reversedNumber * 10 + digit;
            number /= 10;
        }
        return originalNumber == reversedNumber;
    }//S·ªë Palindrome l√† s·ªë m√† khi ƒë·∫£o ng∆∞·ª£c c√°c ch·ªØ s·ªë v·∫´n gi·ªëng nh∆∞ s·ªë ban ƒë·∫ßu. V√≠ d·ª•: 121, 12321.

    public static void printFibonacci(int n) {
        if (n <= 0) {
            System.out.println("S·ªë l∆∞·ª£ng s·ªë Fibonacci ph·∫£i l·ªõn h∆°n 0.");
        } else {
            long F0 = 0, F1 = 1;
            // In ra s·ªë Fibonacci ƒë·∫ßu ti√™n
            if (n >= 1) {
                System.out.print(F0 + " ");
            }
            // In ra s·ªë Fibonacci th·ª© hai
            if (n >= 2) {
                System.out.print(F1 + " ");
            }
            // T√≠nh v√† in ra c√°c s·ªë Fibonacci ti·∫øp theo
            for (int i = 3; i <= n; i++) {
                long Fn = F0 + F1;  // Fn = F(n-1) + F(n-2)
                System.out.print(Fn + " ");
                // C·∫≠p nh·∫≠t l·∫°i gi√° tr·ªã cho F0 v√† F1
                F0 = F1;
                F1 = Fn;
            }
            System.out.println();  // Xu·ªëng d√≤ng sau khi in h·∫øt
        }

    }

    /*  V√≤ng l·∫∑p for:

V√≤ng l·∫∑p b·∫Øt ƒë·∫ßu t·ª´ gi√° tr·ªã i = 3 v√† ti·∫øp t·ª•c cho ƒë·∫øn khi ƒë·∫°t ƒë·ªß s·ªë l∆∞·ª£ng Fibonacci y√™u c·∫ßu (n).
M·ªói l·∫ßn l·∫∑p, gi√° tr·ªã Fibonacci ti·∫øp theo (Fn) ƒë∆∞·ª£c t√≠nh theo c√¥ng th·ª©c 
ùêπùëõ=ùêπn-1+ùêπùëõ‚àí2 
‚Äã
 . Sau ƒë√≥, in ra gi√° tr·ªã n√†y v√† c·∫≠p nh·∫≠t l·∫°i hai gi√° tr·ªã tr∆∞·ªõc ƒë√≥: F0 tr·ªü th√†nh F1, v√† F1 tr·ªü th√†nh Fn.*/
    public static boolean isPerfectSquare(int n) {//so chinh phuong
        if (n < 0) {
            return false;
        }
        int sqrt = (int) Math.sqrt(n);
        return (sqrt * sqrt == n);
        /*H√†m n√†y ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë Fibonacci hay kh√¥ng. M·ªôt s·ªë thu·ªôc d√£y Fibonacci n·∫øu n√≥ th·ªèa m√£n ƒëi·ªÅu ki·ªán r·∫±ng 5ùëõ^2+4 ho·∫∑c 5ùëõ^2‚àí4
‚àí4 l√† s·ªë ch√≠nh ph∆∞∆°ng.*/
    }

    public static boolean isFibonacci(int number) {
        return isPerfectSquare(5 * number * number + 4) || isPerfectSquare(5 * number * number - 4);

    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Nh·∫≠p hai s·ªë nguy√™n d∆∞∆°ng a v√† b
        System.out.print("Nh·∫≠p s·ªë a: ");
        int a = scanner.nextInt();

        System.out.print("Nh·∫≠p s·ªë b: ");
        int b = scanner.nextInt();
        int ucln = gcd(a, b);
        int bcnn = lcm(a, b);
        System.out.println("Nhap so c");
        int c = scanner.nextInt();
        sumOfDigits(c);
    }

}
